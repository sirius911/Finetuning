import argparse
import os
import sys
from mistralai import Mistral
from colorama import Fore, Style

# Cl√© API pour l'acc√®s √† Mistral AI
api_key = "cle_api_mistral"
model = "mistral-large-latest"

# Initialisation du client Mistral avec la cl√© API
client = Mistral(api_key=api_key)

# Mod√®les de requ√™tes pour diff√©rents types de rapports m√©dicaux par sp√©cialit√©
templates = {
    "Pathologistes cliniciens": [
        "un compte rendu op√©ratoire d'une appendicectomie qui s'est bien pass√©e.",
        "une chol√©cystectomie laparoscopique r√©ussie.",
        "une r√©paration de hernie inguinale sans complications.",
        "une mastectomie bilat√©rale sans incident perop√©ratoire.",
        "une hyst√©rectomie abdominale r√©ussie.",
        "une c√©sarienne sans complications.",
        "une op√©ration neuro-chirurgicale compliqu√©e."
    ],
    "m√©decin g√©n√©raliste": [
        "une ordonnance pour un patient avec une infection respiratoire.",
        "une ordonnance pour un patient avec hypertension.",
        "une ordonnance pour un patient avec diab√®te de type 2.",
        "une ordonnance pour un patient avec une otite aigu√´.",
        "une ordonnance pour un patient avec asthme.",
        "une ordonnance pour un patient avec une infection urinaire."
    ],
    "radiologue": [
        "un rapport radiologique indiquant une fracture du tibia.",
        "un rapport radiologique indiquant une pneumonie.",
        "un rapport radiologique indiquant une arthrose du genou.",
        "un rapport radiologique montrant une fracture de la clavicule.",
        "un rapport radiologique montrant une scoliose l√©g√®re.",
        "un rapport radiologique montrant une luxation de l'√©paule."
    ],
    "radiologue": [
        "un rapport de scanner thoracique normal.",
        "un rapport de scanner abdominal montrant une lithiase r√©nale.",
        "un rapport de scanner c√©r√©bral montrant un AVC isch√©mique.",
        "un scanner pelvien normal.",
        "un scanner abdominal montrant une appendicite aigu√´.",
        "un scanner thoracique montrant une embolie pulmonaire.",
        "un IRM c√©r√©bral."
    ],
    "Pathologistes cliniciens": [
        "un rapport de laboratoire biologique indiquant une an√©mie l√©g√®re.",
        "un rapport de laboratoire biologique indiquant une hypercholest√©rol√©mie.",
        "un rapport de laboratoire biologique indiquant une infection urinaire.",
        "un rapport de laboratoire biologique montrant une glyc√©mie √©lev√©e.",
        "un rapport de laboratoire biologique montrant une fonction h√©patique normale.",
        "un rapport de laboratoire biologique montrant une thyro√Ødite de Hashimoto."
    ],
    "chirurgien orthop√©dique": [
        "un compte rendu d'une arthroplastie de la hanche r√©ussie.",
        "un compte rendu de r√©paration de ligament crois√© ant√©rieur.",
        "un compte rendu d'une fusion vert√©brale sans complications.",
        "un compte rendu de r√©duction d'une fracture de l'hum√©rus.",
        "un compte rendu d'une r√©paration du tendon d'Achille."
    ],
    "neurochirurgien": [
        "un compte rendu d'une craniotomie pour tumeur c√©r√©brale.",
        "un compte rendu de chirurgie de la colonne vert√©brale pour hernie discale.",
        "un compte rendu d'une intervention pour an√©vrisme c√©r√©bral.",
        "un compte rendu d'une chirurgie pour √©pilepsie r√©fractaire.",
        "un compte rendu d'une d√©compression microvasculaire."
    ],
    "chirurgien cardiaque": [
        "un compte rendu de pontage coronarien.",
        "un compte rendu de remplacement de valve aortique.",
        "un compte rendu de r√©paration d'une dissection aortique.",
        "un compte rendu d'une chirurgie de la cardiopathie cong√©nitale.",
        "un compte rendu d'une implantation de stimulateur cardiaque."
    ],
}

# Fonction pour g√©n√©rer une conclusion via l'API Mistral
def generate_conclusion(prompt, docteur):
    """
    G√©n√®re une conclusion m√©dicale bas√©e sur un prompt et la sp√©cialit√© d'un docteur.
    
    Args:
        prompt (str): Le sujet ou le th√®me √† d√©velopper pour le rapport m√©dical.
        docteur (str): La sp√©cialit√© du docteur pour personnaliser le style du rapport.
        
    Returns:
        str: La conclusion g√©n√©r√©e par l'API Mistral, ou None en cas d'erreur.
    """
    print(f"{Fore.BLUE}{docteur}{Style.RESET_ALL} : {prompt}", end=' ')
    
    # Construction du prompt en fonction du docteur et du th√®me
    prompt = f"En tant que {docteur}, √©cris une phrase de moins de trente secondes ou moins de 50 mots s'adressant √† un confr√®re ou une consoeur." \
        "Elle doit √™tre m√©dicale avec des termes compliqu√©s. Il ne doit pas y avoir d'unit√© ou de chiffre." \
        "Le th√®me de cette phrase est : {prompt}" \
        "N'√©cris pas de lettre toute seule ou d'acronyme." \
        "Ne mets pas la phrase entre guillemets."
    
    try:
        # Envoi de la requ√™te √† l'API Mistral pour obtenir une r√©ponse
        response = client.chat.complete(
            model=model,
            messages=[
                {
                    "role": "user",
                    "content": prompt,
                },
            ]
        )
        print("üëç")
        return response.choices[0].message.content
    except Exception as e:
        # Gestion des erreurs lors de la requ√™te
        print(f"{Fore.RED}Erreur : {e}{Style.RESET_ALL}")
        return None

# Fonction pour g√©n√©rer plusieurs fichiers de conclusions
def generate_conclusion_files(num_files, output_dir):
    """
    G√©n√®re plusieurs fichiers de conclusions m√©dicales bas√©es sur des mod√®les de requ√™tes et les enregistre dans un r√©pertoire.
    
    Args:
        num_files (int): Le nombre de fichiers √† g√©n√©rer pour chaque prompt.
        output_dir (str): Le r√©pertoire de sortie o√π seront enregistr√©s les fichiers g√©n√©r√©s.
    """
    # V√©rification et cr√©ation du r√©pertoire de sortie s'il n'existe pas
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    file_count = 1
    # Parcours des docteurs et de leurs prompts associ√©s dans les mod√®les
    for doctor, prompts in templates.items():
        for prompt in prompts:
            for _ in range(num_files):
                print(f"G√©n√©ration du fichier {file_count} pour {doctor} avec le prompt : {prompt}")
                
                # G√©n√©ration de la conclusion
                conclusion = generate_conclusion(prompt, doctor)

                if conclusion:
                    # Nom du fichier g√©n√©r√©
                    file_name = f"rapport{str(file_count).zfill(2)}.txt"
                    file_path = os.path.join(output_dir, file_name)

                    # Enregistrement de la conclusion dans le fichier
                    with open(file_path, "w") as file:
                        file.write(conclusion)

                    file_count += 1

    print(f"{file_count - 1} fichiers de rapport g√©n√©r√©s avec succ√®s.")

if __name__ == "__main__":
    # D√©finition du parseur d'arguments
    parser = argparse.ArgumentParser(description="G√©n√®re des rapports m√©dicaux al√©atoires par Mistral AI.")
    parser.add_argument("num_files", type=int, help="Le nombre de fichiers de conclusions √† g√©n√©rer.")
    args = parser.parse_args()

    # G√©n√©ration des fichiers de conclusions dans le r√©pertoire "rapport_text"
    generate_conclusion_files(int(args.num_files), "rapport_text")

    print(f"{args.num_files} Fichier(s) de rapport g√©n√©r√©(s) avec succ√®s.")
